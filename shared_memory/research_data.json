{
  "assigned_by": "Guido",
  "topic": "claude_code_hooks_sound_notifications",
  "timestamp": "2025-08-01",
  "sources": [
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/hooks",
      "credibility": "alta",
      "key_insights": [
        "Hooks are user-defined shell commands that execute at various points in Claude Code's lifecycle",
        "PostToolUse runs immediately after a tool completes successfully",
        "Configuration through settings.json with specific matcher patterns",
        "Support for project-specific hooks using $CLAUDE_PROJECT_DIR"
      ],
      "code_examples": "{\n  \"hooks\": {\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"Write|Edit\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"$CLAUDE_PROJECT_DIR/.claude/hooks/sound-notification.sh\"\n          }\n        ]\n      }\n    ]\n  }\n}"
    },
    {
      "url": "https://github.com/disler/claude-code-hooks-mastery",
      "credibility": "alta",
      "key_insights": [
        "Hooks run in parallel with 60-second execution limit",
        "Support for JSON output and sophisticated flow control",
        "Intelligent TTS integration with multiple providers",
        "Exit codes control execution flow (0=success, 2=critical block)"
      ],
      "code_examples": "# Python hook handler example\nif tool_name == \"Write\" and not tool_response.get(\"success\"):\n    output = {\n        \"decision\": \"block\",\n        \"reason\": \"File write operation failed\"\n    }\n    print(json.dumps(output))"
    },
    {
      "url": "https://superuser.com/questions/101974/play-a-sound-maybe-wav-from-windows-line-command",
      "credibility": "alta",
      "key_insights": [
        "PowerShell console beep: [console]::beep(frequency, duration)",
        "System sounds via [System.Media.SystemSounds]",
        "WSL2 can call PowerShell commands directly",
        "Multiple sound options: beep, wav files, system sounds"
      ],  
      "code_examples": "# PowerShell beep commands\npowershell.exe -c \"[console]::beep(1000,300)\"\npowershell.exe -c \"[System.Media.SystemSounds]::Exclamation.Play()\"\n\n# WSL2 beep function\n_beep () { powershell.exe \"[console]::beep($1,$2)\" }\nalias beep=\"_beep 2000 300\""
    },
    {
      "url": "https://github.com/anthropics/claude-code/issues/1288",
      "credibility": "alta",
      "key_insights": [
        "Feature request específica para sound notifications en Claude Code",
        "Comunidad activa pidiendo alertas auditivas",
        "Casos de uso documentados para notificaciones de tareas completadas",
        "Discusión sobre implementación multiplataforma"
      ],
      "code_examples": "# Ejemplo de implementación sugerida\n\"hooks\": {\n  \"PostToolUse\": [\n    {\n      \"matcher\": \"*\",\n      \"hooks\": [\n        {\n          \"type\": \"command\",\n          \"command\": \"osascript -e 'beep 2'\" # macOS\n        }\n      ]\n    }\n  ]\n}"
    },
    {
      "url": "https://unix.stackexchange.com/questions/585229/how-do-i-make-my-pc-speaker-beep-in-wsl",
      "credibility": "alta",
      "key_insights": [
        "WSL2 no soporta nativamente el PC speaker beep",
        "PowerShell es la solución más confiable para sonidos en WSL2",
        "Alternativas incluyen herramientas específicas como wsl-beep",
        "Consideraciones de permisos y disponibilidad de PowerShell"
      ],
      "code_examples": "# Solución WSL2 más confiable\npowershell.exe -c \"[console]::beep(1000,500)\"\n\n# Función bash para WSL2\nbeep() {\n  powershell.exe -c \"[System.Console]::Beep($1, $2)\"\n}\n\n# Uso\nbeep 800 200  # frecuencia 800Hz, duración 200ms"
    }
  ],
  "technical_summary": "Claude Code hooks permiten ejecutar comandos automáticamente en eventos específicos. PostToolUse es ideal para notificaciones sonoras después de completar herramientas como Edit, Write, Bash, TodoWrite. En Windows/WSL2, PowerShell ofrece múltiples métodos para reproducir sonidos: console beep, system sounds y archivos wav. La configuración se realiza via settings.json con matchers que identifican las herramientas objetivo.",
  "implementation_recommendations": [
    "Usar PostToolUse hooks para notificaciones después de completar tareas",
    "Implementar comandos PowerShell para sonidos en Windows/WSL2",
    "Configurar matchers específicos: 'Edit|Write|Bash|TodoWrite'",
    "Usar frecuencias diferenciadas: 1000Hz para tareas normales, 2000Hz para errores",
    "Considerar duraciones cortas (200-500ms) para evitar interrupciones",
    "Crear scripts separados en .claude/hooks/ para mejor organización",
    "Usar variables de entorno como $CLAUDE_PROJECT_DIR para portabilidad"
  ],
  "potential_issues": [
    "Hooks pueden fallar silenciosamente si el comando no existe",
    "Timeout de 60 segundos para ejecución de hooks",
    "Sonidos pueden no funcionar sin configuración de audio en WSL2",
    "PowerShell debe estar disponible en PATH para comandos desde WSL2",
    "Matchers son case-sensitive y deben coincidir exactamente",
    "Múltiples hooks pueden ejecutarse simultáneamente causando solapamiento de sonidos"
  ],
  "hook_types_available": {
    "PreToolUse": {
      "description": "Runs after Claude creates tool parameters and before processing the tool call",
      "use_cases": ["Permission validation", "Pre-execution checks", "Parameter modification"],
      "control_flow": "Can block execution with 'deny' decision"
    },
    "PostToolUse": {
      "description": "Runs immediately after a tool completes successfully",
      "use_cases": ["Sound notifications", "Code formatting", "Logging", "Cleanup tasks"],
      "control_flow": "Cannot block execution, only react to completion"
    },
    "Notification": {
      "description": "Runs when Claude Code sends notifications",
      "use_cases": ["Desktop notifications", "Attention alerts", "Status updates"],
      "control_flow": "Informational only"
    },
    "Stop": {
      "description": "Runs when the main Claude Code agent has finished responding",
      "use_cases": ["Session cleanup", "Final status notifications", "Summary reports"],
      "control_flow": "End-of-session processing"
    },
    "SessionStart": {
      "description": "Runs when a new Claude Code session begins",
      "use_cases": ["Environment setup", "Welcome notifications", "Initialization"],
      "control_flow": "Setup and preparation"
    },
    "UserPromptSubmit": {
      "description": "Runs when user submits a prompt",
      "use_cases": ["Prompt logging", "User activity tracking", "Input validation"],
      "control_flow": "Can process user input"
    }
  },
  "specific_examples": {
    "basic_beep_hook": {
      "settings_json": "{\n  \"hooks\": {\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"Edit|Write|Bash|TodoWrite\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"powershell.exe -c '[console]::beep(1000,300)'\"\n          }\n        ]\n      }\n    ]\n  }\n}",
      "description": "Beep simple para herramientas principales"
    },
    "differentiated_sounds": {
      "settings_json": "{\n  \"hooks\": {\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"Edit|Write\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"powershell.exe -c '[System.Media.SystemSounds]::Asterisk.Play()'\"\n          }\n        ]\n      },\n      {\n        \"matcher\": \"Bash\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"powershell.exe -c '[console]::beep(2000,200)'\"\n          }\n        ]\n      },\n      {\n        \"matcher\": \"TodoWrite\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"powershell.exe -c '[System.Media.SystemSounds]::Question.Play()'\"\n          }\n        ]\n      }\n    ]\n  }\n}",
      "description": "Sonidos diferenciados por tipo de herramienta"
    },
    "wsl2_optimized": {
      "bash_script": "#!/bin/bash\n# .claude/hooks/sound-notification.sh\n# Recibe información del hook via stdin\nread -r hook_data\nTOOL_NAME=$(echo \"$hook_data\" | jq -r '.tool_name')\n\ncase $TOOL_NAME in\n  \"Edit\"|\"Write\")\n    powershell.exe -c \"[System.Media.SystemSounds]::Asterisk.Play()\"\n    ;;\n  \"Bash\")\n    powershell.exe -c \"[console]::beep(1500,250)\"\n    ;;\n  \"TodoWrite\")\n    powershell.exe -c \"[System.Media.SystemSounds]::Question.Play()\"\n    ;;\n  *)\n    powershell.exe -c \"[console]::beep(1000,200)\"\n    ;;\nesac",
      "settings_json": "{\n  \"hooks\": {\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"*\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"$CLAUDE_PROJECT_DIR/.claude/hooks/sound-notification.sh\"\n          }\n        ]\n      }\n    ]\n  }\n}",
      "description": "Script optimizado para WSL2 con sonidos contextuales usando datos JSON del hook"
    },
    "powershell_sound_options": {
      "console_beep": "powershell.exe -c \"[console]::beep(frequency, duration)\"",
      "system_sounds": {
        "asterisk": "powershell.exe -c \"[System.Media.SystemSounds]::Asterisk.Play()\"",
        "beep": "powershell.exe -c \"[System.Media.SystemSounds]::Beep.Play()\"",
        "exclamation": "powershell.exe -c \"[System.Media.SystemSounds]::Exclamation.Play()\"",
        "hand": "powershell.exe -c \"[System.Media.SystemSounds]::Hand.Play()\"",
        "question": "powershell.exe -c \"[System.Media.SystemSounds]::Question.Play()\""
      },
      "wav_files": "powershell.exe -c \"(New-Object Media.SoundPlayer 'path/to/sound.wav').PlaySync()\"",
      "description": "Opciones completas de sonido disponibles via PowerShell desde WSL2"
    }
  },
  "ready_to_use_configurations": {
    "minimal_setup": {
      "file_path": ".claude/settings.json",
      "content": "{\n  \"hooks\": {\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"Edit|Write|MultiEdit\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"powershell.exe -c '[console]::beep(1200,300)'\"\n          }\n        ]\n      }\n    ]\n  }\n}",
      "description": "Configuración mínima para beep en operaciones de archivos"
    },
    "complete_setup": {
      "file_path": ".claude/settings.json", 
      "content": "{\n  \"hooks\": {\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"Edit|Write|MultiEdit\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"powershell.exe -c '[System.Media.SystemSounds]::Asterisk.Play()'\"\n          }\n        ]\n      },\n      {\n        \"matcher\": \"Bash\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"powershell.exe -c '[console]::beep(1500,200)'\"\n          }\n        ]\n      },\n      {\n        \"matcher\": \"TodoWrite\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"powershell.exe -c '[System.Media.SystemSounds]::Question.Play()'\"\n          }\n        ]\n      }\n    ],\n    \"Stop\": [\n      {\n        \"matcher\": \"\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"powershell.exe -c '[console]::beep(800,500)'\"\n          }\n        ]\n      }\n    ]\n  }\n}",
      "description": "Configuración completa con sonidos diferenciados por herramienta y beep final"
    }
  }
}